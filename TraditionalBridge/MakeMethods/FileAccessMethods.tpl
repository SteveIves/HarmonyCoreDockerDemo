<CODEGEN_FILENAME><StructureName>IO.dbl</CODEGEN_FILENAME>
<REQUIRES_USERTOKEN>XF_INTERFACE</REQUIRES_USERTOKEN>
<REQUIRES_USERTOKEN>XF_ELB</REQUIRES_USERTOKEN>
;//****************************************************************************
;//
;// Title:       FileAccessMethods.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Generates CRUD file access methods methods for a structure.
;//
;// Date:        17th October 2008
;//
;// Author:      Steve Ives, Synergex Professional Services Group
;//              http://www.synergex.com
;//
;//****************************************************************************
;//
;// Copyright (c) 2014, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; File:        <StructureName>IO.dbl
;;
;; Description: File IO methods for structure <STRUCTURE_NAME>
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************

import System.Collections
import Synergex.SynergyDE.Select

.ifndef str<StructureName>
.include "<STRUCTURE_NOALIAS>" repository, structure="str<StructureName>", end
.endc

;;*****************************************************************************

{xfMethod(interface="<XF_INTERFACE>",elb="<XF_ELB>")}
function <StructureName>Add, boolean

    {xfParameter(name="<StructureName>")}
    required in a<StructureName>, str<StructureName>

    stack record
        retVal, boolean
        ch, int
        tmprec, str<StructureName>
    endrecord

    external function
        Validate<StructureName>, boolean
    endexternal

proc
    if (retVal=%<StructureName>Validate(tmprec=a<StructureName>))
    begin
        try
        begin
            open(ch=0,u:i,"<FILE_NAME>")
            store(ch,tmprec)
            retVal = true
        end
        catch (ex)
        begin
            nop
        end
        finally
        begin
            if (ch)
                close ch
        end
        endtry
    end

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="<XF_INTERFACE>",elb="<XF_ELB>")}
function <StructureName>Delete, boolean

<PRIMARY_KEY>
  <SEGMENT_LOOP>
    {xfParameter(name="<SegmentName>")}
    required in a<SegmentName>, <segment_spec>

  </SEGMENT_LOOP>
</PRIMARY_KEY>
    stack record local_data
        retVal  ,boolean
        ch, int
        <structure_name>, str<StructureName>
    endrecord
proc

    init local_data

<PRIMARY_KEY>
  <SEGMENT_LOOP>
    <structure_name>.<segment_name> = a<SegmentName>
  </SEGMENT_LOOP>
</PRIMARY_KEY>

    try
    begin
        open(ch=0,u:i,"<FILE_NAME>")
        read(ch,<structure_name>,keyval(ch,<structure_name>,0))
        delete(ch)
    end
    catch (ex)
    begin
        retVal = false
    end
    finally
    begin
        if (ch)
            close ch
     end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="<XF_INTERFACE>",elb="<XF_ELB>")}
function <StructureName>Get, boolean

<PRIMARY_KEY>
  <SEGMENT_LOOP>
    {xfParameter(name="<SegmentName>")}
    required in  a<SegmentName>, <segment_spec>

  </SEGMENT_LOOP>
</PRIMARY_KEY>
    {xfParameter(name="<StructureName>")}
    required out a<StructureName>, str<StructureName>

    stack record local_data
        retVal, boolean
        ch, int
    endrecord

proc
    init local_data, a<StructureName>
    retVal = true

<PRIMARY_KEY>
  <SEGMENT_LOOP>
    a<StructureName>.<segment_name> = a<SegmentName>
  </SEGMENT_LOOP>
</PRIMARY_KEY>

    try
    begin
        open(ch=0,i:i,"<FILE_NAME>")
        read(ch,a<StructureName>,keyval(ch,a<StructureName>,0))
    end
    catch (ex)
    begin
        init a<StructureName>
        retVal = false
    end
    finally
    begin
        if (ch)
            close ch
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="<XF_INTERFACE>",elb="<XF_ELB>")}
function <StructureName>GetAll, boolean

<PRIMARY_KEY>
  <SEGMENT_LOOP_FILTER>
    {xfParameter(name="<SegmentName>")}
    required in  a<SegmentName>, <segment_spec>

  </SEGMENT_LOOP_FILTER>
</PRIMARY_KEY>
    {xfParameter(name="<StructureName>s",collectionType=xfCollectType.structure,structure="str<StructureName>",dataTable=true)}
    required out a<StructureName>s, @ArrayList

    stack record local_data
        retVal, boolean
        ch, int
        <structure_name>, str<StructureName>
<PRIMARY_KEY>
  <IF MULTIPLE_SEGMENTS>
        filterData, a<KEY_LENGTH>
        filterLen, int
  </IF>
</PRIMARY_KEY>
    endrecord

proc
    init local_data
    retVal=true

    a<StructureName>s = new ArrayList()

<PRIMARY_KEY>
  <IF MULTIPLE_SEGMENTS>
    <SEGMENT_LOOP_FILTER>
    <structure_name>.<segment_name> = a<SegmentName>
    filterLen += ^size(<structure_name>.<segment_name>)
    </SEGMENT_LOOP_FILTER>
    filterData=keyval(ch,<structure_name>,0)
  </IF>
</PRIMARY_KEY>

    try
    begin
        ;;Open the data file
        open(ch=0,i:i,"<FILE_NAME>")

        ;;Position to the first record to be returned
<PRIMARY_KEY>
  <IF SINGLE_SEGMENT>
        find(ch,,^FIRST)
  <ELSE MULTIPLE_SEGMENTS>
        find(ch,,filterData(1:filterLen))
  </IF>
</PRIMARY_KEY>

        ;;Read and return the data
        repeat
        begin
            ;;Get the next record
            reads(ch,<structure_name>)
<PRIMARY_KEY>
  <IF MULTIPLE_SEGMENTS>

            ;;Make sure we're still in range with the filter
            if (keyval(ch,<structure_name>,0)!=filterData(1:filterLen))
                exitloop
  </IF>
</PRIMARY_KEY>

            ;;Add the record to the return collection
            a<StructureName>s.Add((@str<StructureName>)<structure_name>)
        end
    end
    catch (ex, @EndOfFileException)
        nop
    catch (ex, @KeyNotSameException)
        nop
    catch (ex)
        retval=false
    finally
    begin
        if (ch)
            close ch
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="<XF_INTERFACE>",elb="<XF_ELB>")}
function <StructureName>Update, boolean

    {xfParameter(name="<StructureName>")}
    required in a<StructureName>, str<StructureName>

    stack record local_data
        retVal, boolean
        ch,  int
        new<StructureName>, str<StructureName>
        old<StructureName>, str<StructureName>
    endrecord

    external function
        <StructureName>Validate ,boolean
    endexternal

proc
    init local_data

    if (retVal=%<StructureName>Validate(new<StructureName>=a<StructureName>))
    begin
        try
        begin
            open(ch=0,u:i,"<FILE_NAME>")
            read(ch,old<StructureName>,new<StructureName>.<primary_key_field>)
            write(ch,new<StructureName>)
        end
        catch (ex)
        begin
            retVal = false
        end
        finally
        begin
            if (ch)
                close ch
        end
        endtry
    end

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="<XF_INTERFACE>",elb="<XF_ELB>")}
function <StructureName>Validate, boolean

    {xfParameter(name="<StructureName>")}
    required inout a<StructureName>, str<StructureName>

    stack record
        dataIsValid ,boolean
    endrecord

proc
    dataIsValid = true

    ;;Validate required fields
<FIELD_LOOP>
  <IF REQUIRED>
    if ((dataIsValid)&&(!a<StructureName>.<field_name>))
        dataIsValid = false
  </IF>
</FIELD_LOOP>

    ;;Enforce upper-case field reqirements
    if (dataIsValid)
    begin
<FIELD_LOOP>
  <IF UPPERCASE>
        if (a<StructureName>.<field_name>)
            upcase a<StructureName>.<field_name>
  </IF>
</FIELD_LOOP>
    end

    ;Add additional validation code here.  If you find errors that you can fix
    ;then leave dataIsValid as true.  If you find errors that you can't fix
    ;then change dataIdValid to false, and return.



    freturn dataIsValid

endfunction
