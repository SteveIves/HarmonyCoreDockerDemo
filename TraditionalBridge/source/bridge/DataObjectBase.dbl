;;**********************************************************************
;;
;; Title:       DataObjectBase.dbl
;;
;; Type:        Class
;;
;; Description: base class from which all data objects sould be derived
;;
;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
import System
import Json
;import System.ComponentModel.Annotations
namespace Harmony.TraditionalBridge

	public enum SynergySortOrder
		Ascending		;;this is the default to start with
		Descending
	endenum

	;;; <summary>
	;;;  This base abstract class should be extended by all Data Object classes.  It contains the base requirements
	;;;  that enable the $$Symphony Framework$$ to enable communications between the Synergy.NET $$WPF$$ and $$UW$$ user interface and the controlling
	;;;  Synergy application.
	;;; </summary>
	;;; <remarks>
	;;; This base class defines the core elemnts of the code-generated data objects.
	;;; </remarks>
	public abstract class DataObjectBase
		private mIsNew, boolean
		
		;;; <summary>
		;;;  Default constructor to create an instance of the Data Object.
		;;; </summary>
		public method DataObjectBase
			endparams
		proc

		endmethod
		
		public abstract method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
		endmethod

		;;; <summary>
		;;; A place holder routine that allows for additional constructor processing.  This method, 
		;;; if implemented in the extending class, will be executed during standard constructor execution.  The
		;;; method allows for additional processing such as initializing non-repository structure fields.
		;;; </summary>
		protected virtual method extendedConstructor	,void
			endparams
		proc
			
		endmethod
		
		;;; <summary>
		;;; A place holder routine that allows for additional $$Synergy Record$$ processing.  This method, 
		;;; if implemented in the extending class, will be executed when the $$Synergy Record$$ property Set method 
		;;; is accessed.  It allows for additional processing of non-repository structure fields.
		;;; </summary>
		protected virtual method doSynergyRecordProcessing	,void
			endparams
		proc
			
		endmethod
		
		;;protected field that can be used by the extending class to force validation of data
		;;when setting objectvalues using the $$Synergy Record$$ property
		protected mValidateSynergyData	,Boolean
		
		;;; <summary>
		;;;  Method to ensure that $$Synergy Record$$ data is validated
		;;; </summary>
		;;; <remarks>
		;;; This method should be called if you require data validation events to fire when setting values through
		;;; the $$Synergy Record$$ property.  By default the $$HarmonyCore Data Object$$ class does not validate data when set through
		;;; the $$Synergy Record$$ property.  Once this method is called data validation will occur.
		;;; </remarks>
		public method ForceSynergyRecordValidate	,void
			endparams
		proc
			mValidateSynergyData = true
		endmethod
		
		;;; <summary>
		;;;  property to be replaced by the extending class to expose the
		;;;  synergy record data
		;;; </summary>
		;;; <remarks>
		;;; The $$Synergy Record$$ is used to communicate the complete Synergy record area between you program and the 
		;;; $$HarmonyCore Data Object$$.  This property will always contain the current record data and can be used by your program
		;;; to update all the fields within the $$HarmonyCore Data Object$$.  when setting, the data is extracted into the individual internal
		;;; fields and the _PROPRTYCHANGED_ event is raised.
		;;; </remarks>
		public abstract readonly property SynergyRecord, a
		public abstract readonly property OriginalSynergyRecord, a

		private mIsDataModified, boolean
		
		;;; <summary>
		;;;  This method allows you to restore the internal data area (SynergyRecord) of a $$HarmonyCore Data Object$$ to it's original value.  The original value
		;;;  must have previously been stored in the OriginalSynergyRecord property.  This OriginalSynergyRecord value is then used to reset the 
		;;;  SynergyRecord value.  All the required RaisePropertyChanged events are fired and the IsModified property will be reset to False.
		;;; </summary>		
		public method RestoreOriginalData, void
			endparams
			record
				functor, @RestoreOriginalDataFunctor
		proc
			functor = new RestoreOriginalDataFunctor() { parentInstance = this }
			InternalSynergyRecord(functor)
			mIsDataModified = false
			mreturn
		endmethod
		
		private class RestoreOriginalDataFunctor extends AlphaAction
			public parentInstance, @DataObjectBase
			public override method Run, void
				inout alphaData, a
				inout alphaData2, a
			proc
				alphaData = parentInstance.OriginalSynergyRecord
			endmethod
		endclass
		;;; <summary>
		;;;  Method to be replaced by the extending class to initialise all
		;;;  member data fields
		;;; </summary>
		public abstract method InitialValidateData	,Void
			endparams
		proc
		endmethod

		;;; <summary>
		;;;  Method to allow the extending class to initialise class fields, etc.
		;;; </summary>
		public virtual method InitData	,void
			endparams
		proc
			mIsDataModified = false
			mIsNew = true
		endmethod		
		
		;;; <summary>
		;;;  Method to allow the extending class to indicate the $$HarmonyCore Data Object$$ has changed.  The IsNew flag is set to False.
		;;; </summary>
		protected method setUsed	,void
			endparams
		proc
			mIsNew = false
		endmethod		
		
		;;; <summary>
		;;;  Method to allow the extending class to initialise class fields, etc.
		;;; </summary>
		public virtual method InitDataPlus	,void
			endparams
		proc
			InitData()
		endmethod		

		;;; <summary>
		;;;  Virtal method to be overriden by the implementing class.
		;;; </summary>
		;;;<param name="obj1">The first object to compare</param>
		;;;<param name="obj2">The second object to compare against</param>
		;;;<param name="colName">The name of the propert/column being sorted</param>
		;;;<param name="sortDir">The direction of the sort, or type Harmony.Core.Framework.SynergySortOrder</param>
		;;;<returns>The method should return an integer result indicating that (0) the two objects are identical, (1) that the first object
		;;; is greater than the second, or (-1) that the first object vlaue is less than the second.
		;;;</returns>
		;;;<remarks>
		;;; The CompareObjects method is designed to be implemented by the implementing class.  It will be called when objects within a list are being sorted.  
		;;; When called, two objects are supplied and the required sort direction.  This method should be code generated.  If the method returns a value of (-2) then
		;;; the sort method will attmpt to execute the CustomCompareObjects method which allows for customer sorting of object data properties.
		;;;</remarks>
		public virtual method CompareObjects	,int
			in req obj1					,@Object
			in req obj2					,@Object
			in req colName				,String
			in req sortDir				,SynergySortOrder
			endparams
		proc
			mreturn 0
		endmethod
		
		;;; <summary>
		;;;  Virtal method to be overriden by the implementing class.
		;;; </summary>
		;;;<param name="obj1">The first object to compare</param>
		;;;<param name="obj2">The second object to compare against</param>
		;;;<param name="colName">The name of the propert/column being sorted</param>
		;;;<param name="sortDir">The direction of the sort, or type Harmony.Core.Framework.SynergySortOrder</param>
		;;;<returns>The method should return an integer result indicating that (0) the two objects are identical, (1) that the first object
		;;; is greater than the second, or (-1) that the first object vlaue is less than the second.
		;;;</returns>
		;;;<remarks>
		;;; The CompareObjects method is designed to be implemented by the implementing class.  It will be called when objects within a list are being sorted.  
		;;; When called, two objects are supplied and the required sort direction.  By default the $$HarmonyCore Data Object$$ will execute the CompareObjects method.  This method will be executed if the
		;;; default CompareObjects method returns a value of (-2)
		;;;</remarks>
		public virtual method CustomCompareObjects	,int
			in req obj1					,@Object
			in req obj2					,@Object
			in req colName				,String
			in req sortDir				,SynergySortOrder
			endparams
		proc
			mreturn 0
		endmethod
		
		
		protected mGlobalRFA  ,a10
		
		;;; <summary>
		;;;  Expose a simpler property that allows you to store/retreive the $$HarmonyCore Data Object$$ global RFA address.
		;;; </summary>		
		
		public property GlobalRFA, a10
			method get
			proc
				mreturn mGlobalRFA
			endmethod
			method set
			proc
				mGlobalRFA = value
			endmethod
		endproperty

		;;override this in a dataobjectbase where we have to deal with binary data being sent from a big endian to a little endian system
		public virtual method Serialize, void
			serializer, @JsonSerializer
			optional name, @string
		proc
			if(^passed(name)) then
				serializer.ObjectData(SynergyRecord, Metadata.RPSStructureName, mGlobalRFA, Metadata.RPSStructureHasBinaryData, name)
			else
				serializer.ObjectData(SynergyRecord, Metadata.RPSStructureName, mGlobalRFA, Metadata.RPSStructureHasBinaryData, ^null)
		endmethod

		public abstract property Metadata, @DataObjectMetadataBase
			method get
			proc
			endmethod
		endproperty
	endclass

	public abstract class AlphaAction
		public abstract method Run, void
			inout alphaData, a
			inout alphaData2, a
		proc
		endmethod
	endclass

	
endnamespace

