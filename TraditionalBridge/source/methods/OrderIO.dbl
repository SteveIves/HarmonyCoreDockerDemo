;;*****************************************************************************
;;
;; File:        OrderIO.dbl
;;
;; Description: File IO methods for structure ORDER
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************

import System.Collections
import Synergex.SynergyDE.Select

.ifndef strOrder
.include "ORDERS" repository, structure="strOrder", end
.endc

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function OrderAdd, boolean

    {xfParameter(name="Order")}
    required in aOrder, strOrder

    stack record
        retVal, boolean
        ch, int
        tmprec, strOrder
    endrecord

    external function
        ValidateOrder, boolean
    endexternal

proc
    if (retVal=%OrderValidate(tmprec=aOrder))
    begin
        try
        begin
            open(ch=0,u:i,"DAT:orders.ism")
            store(ch,tmprec)
            retVal = true
        end
        catch (ex)
        begin
            nop
        end
        finally
        begin
            if (ch)
                close ch
        end
        endtry
    end

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function OrderDelete, boolean

    {xfParameter(name="OrderNumber")}
    required in aOrderNumber, d6

    stack record local_data
        retVal  ,boolean
        ch, int
        order, strOrder
    endrecord
proc

    init local_data

    order.order_number = aOrderNumber

    try
    begin
        open(ch=0,u:i,"DAT:orders.ism")
        read(ch,order,keyval(ch,order,0))
        delete(ch)
    end
    catch (ex)
    begin
        retVal = false
    end
    finally
    begin
        if (ch)
            close ch
     end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function OrderGet, boolean

    {xfParameter(name="OrderNumber")}
    required in  aOrderNumber, d6

    {xfParameter(name="Order")}
    required out aOrder, strOrder

    stack record local_data
        retVal, boolean
        ch, int
    endrecord

proc
    init local_data, aOrder
    retVal = true

    aOrder.order_number = aOrderNumber

    try
    begin
        open(ch=0,i:i,"DAT:orders.ism")
        read(ch,aOrder,keyval(ch,aOrder,0))
    end
    catch (ex)
    begin
        init aOrder
        retVal = false
    end
    finally
    begin
        if (ch)
            close ch
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function OrderGetAll, boolean

    {xfParameter(name="Orders",collectionType=xfCollectType.structure,structure="strOrder",dataTable=true)}
    required out aOrders, @ArrayList

    stack record local_data
        retVal, boolean
        ch, int
        order, strOrder
    endrecord

proc
    init local_data
    retVal=true

    aOrders = new ArrayList()


    try
    begin
        ;;Open the data file
        open(ch=0,i:i,"DAT:orders.ism")

        ;;Position to the first record to be returned
        find(ch,,^FIRST)

        ;;Read and return the data
        repeat
        begin
            ;;Get the next record
            reads(ch,order)

            ;;Add the record to the return collection
            aOrders.Add((@strOrder)order)
        end
    end
    catch (ex, @EndOfFileException)
        nop
    catch (ex, @KeyNotSameException)
        nop
    catch (ex)
        retval=false
    finally
    begin
        if (ch)
            close ch
    end
    endtry

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function OrderUpdate, boolean

    {xfParameter(name="Order")}
    required in aOrder, strOrder

    stack record local_data
        retVal, boolean
        ch,  int
        newOrder, strOrder
        oldOrder, strOrder
    endrecord

    external function
        OrderValidate ,boolean
    endexternal

proc
    init local_data

    if (retVal=%OrderValidate(newOrder=aOrder))
    begin
        try
        begin
            open(ch=0,u:i,"DAT:orders.ism")
            read(ch,oldOrder,newOrder.order_number)
            write(ch,newOrder)
        end
        catch (ex)
        begin
            retVal = false
        end
        finally
        begin
            if (ch)
                close ch
        end
        endtry
    end

    freturn retVal

endfunction

;;*****************************************************************************

{xfMethod(interface="MyApi",elb="EXE:xfplMethods")}
function OrderValidate, boolean

    {xfParameter(name="Order")}
    required inout aOrder, strOrder

    stack record
        dataIsValid ,boolean
    endrecord

proc
    dataIsValid = true

    ;;Validate required fields
    if ((dataIsValid)&&(!aOrder.order_number))
        dataIsValid = false
    if ((dataIsValid)&&(!aOrder.customer_number))
        dataIsValid = false
    if ((dataIsValid)&&(!aOrder.placed_by))
        dataIsValid = false
    if ((dataIsValid)&&(!aOrder.date_ordered))
        dataIsValid = false

    ;;Enforce upper-case field reqirements
    if (dataIsValid)
    begin
    end

    ;Add additional validation code here.  If you find errors that you can fix
    ;then leave dataIsValid as true.  If you find errors that you can't fix
    ;then change dataIdValid to false, and return.



    freturn dataIsValid

endfunction
